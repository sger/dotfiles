call plug#begin('~/.vim/plugged')

" Utilities
Plug 'scrooloose/nerdtree'
Plug 'ervandew/supertab'

" Elixir
Plug 'slashmili/alchemist.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'mhinz/vim-mix-format'
Plug 'powerman/vim-plugin-AnsiEsc'

" Phoenix
Plug 'c-brenn/phoenix.vim'
Plug 'tpope/vim-projectionist'

" UI
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'lifepillar/vim-solarized8'

" Git support
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-rhubarb'

" Go
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'fatih/vim-hclfmt'

call plug#end()

"=====================================================
"===================== SETTINGS ======================

set nocompatible
filetype off
filetype plugin indent on

set ttyfast

if !has('nvim')
  set ttymouse=xterm2
  set ttyscroll=3
endif

" Always display the status line
set laststatus=2

" Shift to the next round tab stop
set shiftround

" Enable hightlighting of the current line
set cursorline

" Set encoding to UTF-8
set encoding=utf-8

" Automatically reread files
set autoread

" Automatically indent
set autoindent

" Reconfigure backspace key
set backspace=indent,eol,start

" Enable incremental search
set incsearch

" Enable hightlighting results
set hlsearch

" Enable mouse mode
set mouse=a

" Disable error bells
set noerrorbells
set vb t_vb=

" Show linenumbers
set number
set relativenumber
set ruler

" Show incomplete commands
set showcmd

" Disable swap file
set noswapfile

" Disable backup files
set nobackup

" Split vertical windows right to the current windows
set splitright

" Split horizontal windows below to the current windows
set splitbelow

" Automatically execute :write
set autowrite

" Opening a new file when the current buffer has unsaved changes causes
" files to be hidden instead of closed
set hidden

" Use unix formats instead of windows
set fileformats=unix,dos,mac

" Do not show matching brackets by flickering
set noshowmatch

" Hide default show mode
set noshowmode

" Ignore case when searching
set ignorecase

" Ignore case when searching lowecase
set smartcase

set completeopt=menu,menuone

" Syntax hightlighting
set nocursorcolumn
set nocursorline
set updatetime=300

" Maximum window size
set pumheight=10
set lazyredraw

"http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
set clipboard^=unnamed
set clipboard^=unnamedplus

" ~/.viminfo needs to be writable and readable
set viminfo='200

if has('persistent_undo')
  set undofile
  set undodir=~/.cache/vim
endif

" Set tabs
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set expandtab

" Set the title of terminal
set title

" color
syntax enable
set t_Co=256
set background=dark

let g:molokai_original = 1
let g:rehash256 = 1
"colorscheme molokai
colorscheme solarized8_dark_flat

" Vim airline configuration
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='hybrid'
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1

" Elixir
let g:mix_format_on_save = 1
let g:mix_format_elixir_bin_path = '/usr/local/bin'

" Alchemist
let g:alchemist_tag_disable = 1

" Nerdtree
let g:NERDTreeWinPos = "left"
let g:NERDTreeQuitOnOpen = 1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
let NERDTreeIgnore=[]

"=====================================================
"===================== MAPPINGS ======================

" Change mapleader
let mapleader = ","

" Open vimrc in new tab
nmap <leader>v :tabedit $MYVIMRC<CR>

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Saving
nnoremap <leader>w :w!<CR>
nnoremap <silent> <leader>q :q!<CR>

" Source the current vim file
nnoremap <leader>pr :Runtime<CR>

" Center the screen
noremap <space> zz

" Fugitive bindings
noremap <Leader>ga :Git add %:p<CR><CR>
noremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit -v -q<CR>
nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
noremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <Leader>gp :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gps :Git push<CR>
nnoremap <Leader>gpl :Git pull<CR>

" NerdTree
nmap <leader>n :NERDTreeToggle<CR>

" Go
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
